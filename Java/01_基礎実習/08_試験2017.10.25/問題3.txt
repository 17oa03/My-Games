■問題3

▼(1)
ケ.extends

▼(2)
イ.abstract

▼(3)
オ.implements

▼解答群の解説

ア.static
同じクラスから生成されたインスタンスでフィールドを共有したい場合に、
フィールド宣言の先頭に付加します。
また、「クラスメソッド(インスタンスを生成しないで呼び出せるメソッド)」を
定義する際にも付加します。

イ.abstract
メソッドの処理内容が未確定で記述できない場合に付加します、
このメソッドを「抽象メソッド」と言います。
「抽象メソッド」を含むクラスは必ず「abstract」を付加しないといけません、
このクラスを「抽象クラス」と言います。

ウ.const
定数修飾子、C/C++言語などで値を変更することができない変数を示します。

エ.throws
メソッドや「コンストラクタ」を呼び出した際、
「Exception 系」の例外が発生する可能性がある場合に、
メソッドの定義部分の引数リストの後に「throws 例外クラス名」と記述する。
「throws」と「throw」は間違えやすい、
「throw」は例外インスタンスを呼び出し元に自分で投げる場合に記述する。

オ.implements
「implements」は「実装する」という意味で、
「インタフェース」を継承してサブクラスを定義する場合に記述します。

カ.package
Javaには、各クラスを「パッケージ(package)」というグループに所属させて、
分類・管理できるような仕組みがあります。
クラスをパッケージに所属させるには、
そのクラスのソースコードの先頭に「package 文」を記述します。

キ.this
「this」は「自分自身のインスタンス」を意味しています。
メンバ変数名とローカル変数名が同じだった場合は、
ローカル変数名が優先されるので、
メンバ変数を指定する場合に「this」を付加します。

ク.import
「完全限定クラス名(FQCN)」を省略したい場合に、
ソースコードの先頭(package文の後)に記述します。
C言語のインクルードと全く違い、
別ファイルの機能を読み込んでいるわけではないので注意。

ケ.extends
「継承」する際に記述する修飾子です。

コ.super
「親インスタンス部」を表す「予約語」です。
「親インスタンス部」のメソッドやフィールドに
「子インスタンス部」からアクセスした場合に利用します。